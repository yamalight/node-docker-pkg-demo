apiVersion: v1
kind: Template
labels:
  template: node
message: |-
  Template multistage node
metadata:
  annotations:
    openshift.io/display-name: Multistagenode
    description: |-
      Continuous Integration | Build | Package | Deploy
    iconClass: icon-nodejs
    tags: nodejs,jenkins
  name: nodejs
parameters:
- description: O nome atribuído a todos os objetos frontend definidos neste modelo.
  displayName: Nome
  name: NAME
  required: true
  value: nodejs
- description: O nome do host exposto que irá rotear para o serviço node (Container)
  displayName: URL do Container
  name: CONTAINER_DOMAIN
  value: node-talita-teste.127.0.0.1.nip.io 
- description: O nome do host exposto que irá rotear para o serviço node (App)
  displayName: URL do APP
  name: APPLICATION_DOMAIN
  value: node-talita-teste.127.0.0.1.nip.io 
- description: O URL do repositório com o código-fonte da API.
  displayName: URL Repositório GIT
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/Talits/node-docker-pkg-demo.git
- description: Defina o secret de acesso ao repositório GIT
  displayName: Defina o secret de acesso ao repositório GIT
  name: SOURCE_SECRET
  required: true
  value: github-secret
- description: Quantidade máxima de memória que o contêiner node pode usar.
  displayName: Limite de memória
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Defina um nome de branch, tag ou outra referência de seu repositório se você não estão usando a branch padrão.
  displayName: Branch
  name: SOURCE_REPOSITORY_REF
  value: develop
- description: Defina o caminho relativo ao seu projeto se ele não estiver na raiz do seu repositório.
  displayName: Diretório relativo
  name: CONTEXT_DIR
  value: .
- description: Github Webhook secret
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- description: Bitbucket Webhook secret
  displayName: Bitbucket Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: BITBUCKET_WEBHOOK_SECRET
- description: Generic Webhook secret.
  displayName: Genérico Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
- description: OpenShift Namespace
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: talita-teste
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}
  spec:
    ports:
    - name: api
      protocol: TCP
      port: 3000
      targetPort: 3000
    selector:
      name: ${NAME}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}-app
  spec:
    host: ${APPLICATION_DOMAIN}
    port:
      targetPort: api
    to:
      kind: Service
      name: ${NAME}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}-pod
  spec:
    host: ${CONTAINER_DOMAIN}
    port:
      targetPort: api
    to:
      kind: Service
      name: ${NAME}
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Acompanha as mudanças na imagem do aplicativo
    name: ${NAME}-build
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Acompanha as mudanças na imagem do aplicativo
    name: ${NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Define como criar o aplicativo
    name: ${NAME}-build
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}-build:latest
    source: 
      git:
        uri: ${SOURCE_REPOSITORY_URL}
        ref: ${SOURCE_REPOSITORY_REF}
      sourceSecret:
        name: github-secret
    strategy:
      type: Docker
      dockerStrategy:
          dockerfilePath: build.node.dockerfile
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - bitbucket:
        secret: ${BITBUCKET_WEBHOOK_SECRET}
      type: Bitbucket
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Acompanha as mudanças na imagem do aplicativo
    name: ${NAME}-cp
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Acompanha as mudanças na imagem do aplicativo
    name: ${NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Define como construir o aplicativo
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    source:
      git:
        uri: ${SOURCE_REPOSITORY_URL}
        ref: ${SOURCE_REPOSITORY_REF}
      sourceSecret:
        name: github-secret  
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: node.dockerfile     
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - bitbucket:
        secret: ${BITBUCKET_WEBHOOK_SECRET}
      type: Bitbucket
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Define como é realizada a implantação do APP
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          alpha.image.policy.openshift.io/resolve-names: '*'
        labels:
          name: ${NAME}
        name: ${NAME}
      spec:
        containers:
        - image: ${NAME}:latest
          name: ${NAME}
          ports:
            - containerPort: 3000
              protocol: TCP
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 30
            periodSeconds: 60
          readinessProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 10
            timeoutSeconds: 30
            periodSeconds: 60
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
        triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: '${NAME}:latest'
              namespace: ${NAMESPACE}
          type: ImageChange
        - type: ConfigChange